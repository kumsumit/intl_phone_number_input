// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'app/data/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 650443588419861090),
      name: 'Almirah',
      lastPropertyId: const IdUid(8, 5886631856540541392),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2547885371807895413),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1337562046751918193),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 176942872413666658)),
        ModelProperty(
            id: const IdUid(3, 3249981165054554761),
            name: 'row',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7827546899219904698),
            name: 'column',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8035122535639834050),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8183445711430851507),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2994653569107681385),
            name: 'godownId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3124643966215283057),
            relationTarget: 'Godown'),
        ModelProperty(
            id: const IdUid(8, 5886631856540541392),
            name: 'roomId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 5128553901809614138),
            relationTarget: 'StoreRoom')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 3123983210507373000),
            name: 'items',
            targetId: const IdUid(7, 7686104616152896715))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedAlmirah',
            srcField: 'searchedAlmirah')
      ]),
  ModelEntity(
      id: const IdUid(2, 5546735397151162490),
      name: 'Company',
      lastPropertyId: const IdUid(4, 3907195282144218462),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9148343449157749444),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4996022637711000160),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2682673683802373498),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3907195282144218462),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedCompany',
            srcField: 'searchedCompany'),
        ModelBacklink(name: 'items', srcEntity: 'Item', srcField: 'company')
      ]),
  ModelEntity(
      id: const IdUid(3, 23541243167147205),
      name: 'Customer',
      lastPropertyId: const IdUid(13, 916000615318876202),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6169137759142478881),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 386296629355156397),
            name: 'phone',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 2739277090317619804)),
        ModelProperty(
            id: const IdUid(3, 5688976376850138997),
            name: 'otherPhone',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2233032151363304217),
            name: 'contactListId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3160446253715972547),
            name: 'nickName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6905072520305740774),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const IdUid(5, 5818351785473651651)),
        ModelProperty(
            id: const IdUid(7, 2643476361983890448),
            name: 'gender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1017942869519060131),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1291121398608999850),
            name: 'account',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9183476983728139703),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7099163418992643144),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 3393420678869307654),
            name: 'locationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 8468703540075285650),
            relationTarget: 'Location'),
        ModelProperty(
            id: const IdUid(13, 916000615318876202),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 3578074296547410278),
            relationTarget: 'CustomerCategory')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'receipts', srcEntity: 'Receipt', srcField: 'customer'),
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedCustomer',
            srcField: 'searchedCustomer')
      ]),
  ModelEntity(
      id: const IdUid(4, 1478107778446948592),
      name: 'CustomerCategory',
      lastPropertyId: const IdUid(4, 3066019275268479558),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4479724148809439019),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 364411750122962992),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(8, 2598938997068971214)),
        ModelProperty(
            id: const IdUid(3, 4574407373913119016),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3066019275268479558),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedCustomerCategory',
            srcField: 'searchedCategory'),
        ModelBacklink(
            name: 'customers', srcEntity: 'Customer', srcField: 'category')
      ]),
  ModelEntity(
      id: const IdUid(5, 4490285316791559907),
      name: 'Diary',
      lastPropertyId: const IdUid(5, 415247215539370857),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8057850560807896214),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 789278535525201790),
            name: 'title',
            type: 9,
            flags: 34848,
            indexId: const IdUid(9, 4921007124971034216)),
        ModelProperty(
            id: const IdUid(3, 1259049837053813473),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3509213153816260314),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 415247215539370857),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedDiary',
            srcField: 'searchedDiary')
      ]),
  ModelEntity(
      id: const IdUid(6, 6603878796111150026),
      name: 'Godown',
      lastPropertyId: const IdUid(4, 3201132535412205911),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4484766815305241018),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4759361554196533471),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const IdUid(10, 2713329397401645209)),
        ModelProperty(
            id: const IdUid(3, 3941587938418503884),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3201132535412205911),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'storeRooms', srcEntity: 'StoreRoom', srcField: 'godown'),
        ModelBacklink(
            name: 'almirahs', srcEntity: 'Almirah', srcField: 'godown'),
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedGodown',
            srcField: 'searchedGodown')
      ]),
  ModelEntity(
      id: const IdUid(7, 7686104616152896715),
      name: 'Item',
      lastPropertyId: const IdUid(8, 7186241418954140469),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2469375393172501632),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1790419383692122524),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(11, 5554218477004116955)),
        ModelProperty(
            id: const IdUid(3, 1629286970749503077),
            name: 'alternateName',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1377707526720238897),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1908531307063494927),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5149834589048210235),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4055280737346218911),
            name: 'companyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 2519398463518734909),
            relationTarget: 'Company'),
        ModelProperty(
            id: const IdUid(8, 7186241418954140469),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 333893946692833219),
            relationTarget: 'ItemCategory')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'variant', srcEntity: 'ItemVariant', srcField: 'item')
      ]),
  ModelEntity(
      id: const IdUid(8, 4764549040031650186),
      name: 'ItemCategory',
      lastPropertyId: const IdUid(4, 5673560893149298891),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2628011780347483209),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 938073130528555498),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(14, 6575583962667441987)),
        ModelProperty(
            id: const IdUid(3, 9041497305568729638),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5673560893149298891),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedItemCategory',
            srcField: 'searchedCategory'),
        ModelBacklink(name: 'items', srcEntity: 'Item', srcField: 'category')
      ]),
  ModelEntity(
      id: const IdUid(10, 6842151867450182471),
      name: 'ItemVariant',
      lastPropertyId: const IdUid(10, 3035843645083213980),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1087666541460982969),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2142075136628101082),
            name: 'size',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3933859044344001025),
            name: 'color',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5659580877675449999),
            name: 'model',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6684082967118662900),
            name: 'minimumStock',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4599711902306194243),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8973864902070318702),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 875671757130194532),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8329857852956561182),
            name: 'itemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 3458628913360011261),
            relationTarget: 'Item'),
        ModelProperty(
            id: const IdUid(10, 3035843645083213980),
            name: 'minimumStockUnitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 7818187891017003050),
            relationTarget: 'Unit')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 3534330849899672523),
            name: 'orderedAs',
            targetId: const IdUid(38, 4943333498253501466))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'purchasedRecord',
            srcEntity: 'PurchasedItem',
            srcField: 'purchasedItem'),
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedItem',
            srcField: 'searchedItem')
      ]),
  ModelEntity(
      id: const IdUid(11, 3195835357635031456),
      name: 'Location',
      lastPropertyId: const IdUid(6, 3485806729526435860),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9074461032753522081),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6287848815237134100),
            name: 'area',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7628077064233834680),
            name: 'village',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6208295434558335108),
            name: 'panchayat',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4193481972109434811),
            name: 'block',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3485806729526435860),
            name: 'pinId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 5296642798648360258),
            relationTarget: 'Pincode')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 99376583489519404),
      name: 'Pincode',
      lastPropertyId: const IdUid(5, 8920557183185850909),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 26590981161977182),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5434714057353696963),
            name: 'pincode',
            type: 9,
            flags: 34848,
            indexId: const IdUid(22, 5942123595660613188)),
        ModelProperty(
            id: const IdUid(3, 2865333443820318285),
            name: 'district',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 377998875728192979),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8920557183185850909),
            name: 'country',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'locations', srcEntity: 'Location', srcField: 'pin')
      ]),
  ModelEntity(
      id: const IdUid(14, 7880365881155119254),
      name: 'PurchasedItem',
      lastPropertyId: const IdUid(17, 6446969378783286477),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6368813072188533404),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 703185107425990804),
            name: 'purchasedDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4477419551062184085),
            name: 'dateOfExpiry',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8844177185978677167),
            name: 'purchasingPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7053191807162044824),
            name: 'purchasedQuantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9187872470057439384),
            name: 'currentQuantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 520596205433661418),
            name: 'sellingPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2595113801802596693),
            name: 'row',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 399491725470696635),
            name: 'column',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 210096728872452307),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7528540195674189562),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 416111405990482712),
            name: 'sellingPriceUnitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(23, 4436289026361634115),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(13, 5448752963315784830),
            name: 'purchasingPriceUnitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 1858024386818723853),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(14, 814374074999940058),
            name: 'purchasedQuantityUnitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 5214703309824683001),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(15, 1056428582706804278),
            name: 'currentQuantityUnitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 7562198569060942641),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(16, 8099429279858387841),
            name: 'purchasedItemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 8128098790203314315),
            relationTarget: 'ItemVariant'),
        ModelProperty(
            id: const IdUid(17, 6446969378783286477),
            name: 'suppliedById',
            type: 11,
            flags: 520,
            indexId: const IdUid(28, 968802697394404835),
            relationTarget: 'Supplier')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(3, 8809935799041712644),
            name: 'almirah',
            targetId: const IdUid(1, 650443588419861090)),
        ModelRelation(
            id: const IdUid(4, 1430679982529798376),
            name: 'storeRoom',
            targetId: const IdUid(33, 360102490782741676)),
        ModelRelation(
            id: const IdUid(5, 6933024123071296522),
            name: 'godowns',
            targetId: const IdUid(6, 6603878796111150026))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedPurchasedItem',
            srcField: 'searchedPurchasedItem')
      ]),
  ModelEntity(
      id: const IdUid(15, 6164349965844857073),
      name: 'Receipt',
      lastPropertyId: const IdUid(3, 7167698805232937899),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1322373075303558623),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5548751093822415221),
            name: 'receiptInfoId',
            type: 11,
            flags: 520,
            indexId: const IdUid(29, 235442407918644562),
            relationTarget: 'ReceiptInfo'),
        ModelProperty(
            id: const IdUid(3, 7167698805232937899),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(30, 8536705196171424630),
            relationTarget: 'Customer')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 5705526163242033299),
            name: 'receiptItems',
            targetId: const IdUid(17, 1216895991594552915))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 263256710910178320),
      name: 'ReceiptInfo',
      lastPropertyId: const IdUid(7, 2175200576988475728),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5695981349839208021),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1943672455684804275),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 542986593984207878),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7887184926007624672),
            name: 'number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7289613992382898497),
            name: 'due',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7652139874687696969),
            name: 'dueDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2175200576988475728),
            name: 'totalDiscount',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 1216895991594552915),
      name: 'ReceiptItem',
      lastPropertyId: const IdUid(5, 8598837317695530830),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5781812289033202532),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3419138420552360420),
            name: 'quantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6340479238481016388),
            name: 'soldPrice',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2648333300602027170),
            name: 'unitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(31, 7293324217895678223),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(5, 8598837317695530830),
            name: 'itemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(32, 287374757783662078),
            relationTarget: 'PurchasedItem')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 1811779541276692354),
      name: 'SearchedAlmirah',
      lastPropertyId: const IdUid(3, 828257384479868599),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3057491101027459299),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4945392826983507920),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 828257384479868599),
            name: 'searchedAlmirahId',
            type: 11,
            flags: 520,
            indexId: const IdUid(33, 5654402647398499066),
            relationTarget: 'Almirah')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(19, 8412440259282967285),
      name: 'SearchedCompany',
      lastPropertyId: const IdUid(3, 9166055151027746237),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4103783541653229205),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2102937524202484763),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9166055151027746237),
            name: 'searchedCompanyId',
            type: 11,
            flags: 520,
            indexId: const IdUid(34, 1859163341911551386),
            relationTarget: 'Company')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(20, 4939392573061580936),
      name: 'SearchedCustomer',
      lastPropertyId: const IdUid(3, 7470002598076682222),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 600121814360487281),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7985964974902154561),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7470002598076682222),
            name: 'searchedCustomerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(35, 859809769325473115),
            relationTarget: 'Customer')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 1115172256345396582),
      name: 'SearchedCustomerCategory',
      lastPropertyId: const IdUid(3, 4234740075762450346),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5420489626956560630),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 122572536001808016),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4234740075762450346),
            name: 'searchedCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(36, 2837520985957587464),
            relationTarget: 'CustomerCategory')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(22, 8107161192717975720),
      name: 'SearchedDiary',
      lastPropertyId: const IdUid(3, 2317755023035644257),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3435371164123514499),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1269052545425412101),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2317755023035644257),
            name: 'searchedDiaryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(37, 1710341061849670848),
            relationTarget: 'Diary')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(23, 4405627359889096327),
      name: 'SearchedGodown',
      lastPropertyId: const IdUid(3, 2948843973187857554),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5740390334231144107),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 99202756491212211),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2948843973187857554),
            name: 'searchedGodownId',
            type: 11,
            flags: 520,
            indexId: const IdUid(38, 7695216570970932752),
            relationTarget: 'Godown')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(24, 8500931657298339696),
      name: 'SearchedItem',
      lastPropertyId: const IdUid(3, 426022984185938135),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 865962984746628896),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8742897842686001097),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 426022984185938135),
            name: 'searchedItemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(39, 7647999368986156914),
            relationTarget: 'Item')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(25, 2522925528527884255),
      name: 'SearchedItemCategory',
      lastPropertyId: const IdUid(3, 9222741793231043241),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 994329985866011023),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5187300273669113464),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9222741793231043241),
            name: 'searchedCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(40, 2732507777430355793),
            relationTarget: 'ItemCategory')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(26, 9102194458593626029),
      name: 'SearchedItemVariant',
      lastPropertyId: const IdUid(3, 2437329757823288599),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 85317750932425164),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8447220525639080734),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2437329757823288599),
            name: 'searchedItemVariantId',
            type: 11,
            flags: 520,
            indexId: const IdUid(41, 8719456127898933392),
            relationTarget: 'ItemVariant')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 2405801487014624319),
      name: 'SearchedPurchasedItem',
      lastPropertyId: const IdUid(3, 6352175215429135488),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 897295924673735967),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7340052578474153887),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6352175215429135488),
            name: 'searchedPurchasedItemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(43, 2867702568708422952),
            relationTarget: 'PurchasedItem')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(29, 4794847027967347803),
      name: 'SearchedReceipt',
      lastPropertyId: const IdUid(3, 3240660462967756005),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2432363213628383087),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7461908101360996973),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3240660462967756005),
            name: 'searchedReceiptId',
            type: 11,
            flags: 520,
            indexId: const IdUid(44, 5430531124221498097),
            relationTarget: 'Receipt')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(30, 8832978188916268162),
      name: 'SearchedStoreRoom',
      lastPropertyId: const IdUid(3, 914623012413451272),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3884423848474242169),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4790495193653477363),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 914623012413451272),
            name: 'searchedStoreRoomId',
            type: 11,
            flags: 520,
            indexId: const IdUid(45, 4920091837856597677),
            relationTarget: 'StoreRoom')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 8342692607048677057),
      name: 'SearchedSupplier',
      lastPropertyId: const IdUid(3, 2985572954826481482),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1215997022191465613),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4028103867739569641),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2985572954826481482),
            name: 'searchedSupplierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(46, 3664477283640816702),
            relationTarget: 'Supplier')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 5136151185195989928),
      name: 'SearchedUnit',
      lastPropertyId: const IdUid(3, 8152375583829896400),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2946681857190265944),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1274170505213910011),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8152375583829896400),
            name: 'searchedUnitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(47, 2396354896290737226),
            relationTarget: 'Unit')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(33, 360102490782741676),
      name: 'StoreRoom',
      lastPropertyId: const IdUid(5, 1326541103665488556),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5423645221947838176),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3312002593110579669),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const IdUid(48, 6226446317849215010)),
        ModelProperty(
            id: const IdUid(3, 7570207679080166751),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 161032757388499995),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1326541103665488556),
            name: 'godownId',
            type: 11,
            flags: 520,
            indexId: const IdUid(49, 970512216593895490),
            relationTarget: 'Godown')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedStoreRoom',
            srcField: 'searchedStoreRoom'),
        ModelBacklink(name: 'almirahs', srcEntity: 'Almirah', srcField: 'room')
      ]),
  ModelEntity(
      id: const IdUid(34, 8385559813412579991),
      name: 'Supplier',
      lastPropertyId: const IdUid(12, 8147223942557797770),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 490050399193443529),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1545103677732809),
            name: 'phone',
            type: 9,
            flags: 2080,
            indexId: const IdUid(50, 4312584273330305350)),
        ModelProperty(
            id: const IdUid(3, 7558590805061021685),
            name: 'otherPhone',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 614766974616199024),
            name: 'contactListId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2983584087479871134),
            name: 'nickName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8272573965740265629),
            name: 'name',
            type: 9,
            flags: 8,
            indexId: const IdUid(51, 2804411000697302149)),
        ModelProperty(
            id: const IdUid(7, 1384825452287639581),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6932033052481243229),
            name: 'account',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5145852174427051972),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2359299269247379872),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6143220007585880164),
            name: 'locationId',
            type: 11,
            flags: 520,
            indexId: const IdUid(52, 5405772043041724547),
            relationTarget: 'Location'),
        ModelProperty(
            id: const IdUid(12, 8147223942557797770),
            name: 'shopOrBusinessName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'suppliedItems',
            srcEntity: 'PurchasedItem',
            srcField: 'suppliedBy'),
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedSupplier',
            srcField: 'searchedSupplier')
      ]),
  ModelEntity(
      id: const IdUid(35, 3626554930139877923),
      name: 'Unit',
      lastPropertyId: const IdUid(5, 2951324526854072251),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2620117209958350931),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2520151235723756488),
            name: 'fullName',
            type: 9,
            flags: 2080,
            indexId: const IdUid(53, 106114144514530879)),
        ModelProperty(
            id: const IdUid(3, 8166622149989475531),
            name: 'shortName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4030462144843582711),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2951324526854072251),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'searches',
            srcEntity: 'SearchedUnit',
            srcField: 'searchedUnit')
      ]),
  ModelEntity(
      id: const IdUid(36, 3128190389450085946),
      name: 'UnitRelation',
      lastPropertyId: const IdUid(4, 4880612287378268162),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8284800786489402626),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8030613511296184365),
            name: 'value',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1699343047309906105),
            name: 'unitFromId',
            type: 11,
            flags: 520,
            indexId: const IdUid(54, 1729109744324109258),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(4, 4880612287378268162),
            name: 'unitToId',
            type: 11,
            flags: 520,
            indexId: const IdUid(55, 3334467277208154016),
            relationTarget: 'Unit')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(37, 964168017410565217),
      name: 'PurchaseOrder',
      lastPropertyId: const IdUid(4, 1023711377363174812),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1492586633579407933),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2248866419168107737),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7338651205622126177),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1023711377363174812),
            name: 'supplierId',
            type: 11,
            flags: 520,
            indexId: const IdUid(56, 3014240709394639432),
            relationTarget: 'Supplier')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 665650501529604873),
            name: 'orderedItems',
            targetId: const IdUid(38, 4943333498253501466))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(38, 4943333498253501466),
      name: 'PurchaseOrderItem',
      lastPropertyId: const IdUid(7, 9201913530108193907),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5685352942131277735),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6251583531318740619),
            name: 'quantity',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4904520255263969037),
            name: 'dateOfCreation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3880333909709661620),
            name: 'dateOfUpdation',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8418905901352937126),
            name: 'unitId',
            type: 11,
            flags: 520,
            indexId: const IdUid(57, 966487533039877391),
            relationTarget: 'Unit'),
        ModelProperty(
            id: const IdUid(6, 8120257673955388956),
            name: 'itemId',
            type: 11,
            flags: 520,
            indexId: const IdUid(58, 3705730521874367745),
            relationTarget: 'ItemVariant'),
        ModelProperty(
            id: const IdUid(7, 9201913530108193907),
            name: 'orderedInId',
            type: 11,
            flags: 520,
            indexId: const IdUid(59, 8402922940898842123),
            relationTarget: 'PurchaseOrder')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(39, 8810800911941814570),
      name: 'SearchedPurchaseOrder',
      lastPropertyId: const IdUid(3, 913575244702227040),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2092134772835204324),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2883658308384928792),
            name: 'datetime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 913575244702227040),
            name: 'searchedOrderId',
            type: 11,
            flags: 520,
            indexId: const IdUid(60, 4682163895779857305),
            relationTarget: 'PurchaseOrder')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(39, 8810800911941814570),
      lastIndexId: const IdUid(60, 4682163895779857305),
      lastRelationId: const IdUid(9, 665650501529604873),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        6145054875762183440,
        4128264320292842738,
        6169911816713222516
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1780070200151674826,
        769043045094587578,
        2861209161730132114,
        7938852572690636508,
        4253697121150348149,
        3028033600519498547,
        1839523243990962233,
        9026319272354563375,
        4488797013570870065,
        3588379017538001548,
        8176846338405818000,
        2320729568546690615,
        2387192677903044873,
        4545861866493637642
      ],
      retiredRelationUids: const [6229432461412395518],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Almirah: EntityDefinition<Almirah>(
        model: _entities[0],
        toOneRelations: (Almirah object) => [object.godown, object.room],
        toManyRelations: (Almirah object) => {
              RelInfo<Almirah>.toMany(1, object.id!): object.items,
              RelInfo<SearchedAlmirah>.toOneBacklink(3, object.id!,
                      (SearchedAlmirah srcObject) => srcObject.searchedAlmirah):
                  object.searches
            },
        getId: (Almirah object) => object.id,
        setId: (Almirah object, int id) {
          object.id = id;
        },
        objectToFB: (Almirah object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.row);
          fbb.addInt64(3, object.column);
          fbb.addInt64(4, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(5, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.godown.targetId);
          fbb.addInt64(7, object.room.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Almirah()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..row =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8)
            ..column =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.godown.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.godown.attach(store);
          object.room.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.room.attach(store);
          InternalToManyAccess.setRelInfo(object.items, store,
              RelInfo<Almirah>.toMany(1, object.id!), store.box<Almirah>());
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedAlmirah>.toOneBacklink(3, object.id!,
                  (SearchedAlmirah srcObject) => srcObject.searchedAlmirah),
              store.box<Almirah>());
          return object;
        }),
    Company: EntityDefinition<Company>(
        model: _entities[1],
        toOneRelations: (Company object) => [],
        toManyRelations: (Company object) => {
              RelInfo<SearchedCompany>.toOneBacklink(3, object.id!,
                      (SearchedCompany srcObject) => srcObject.searchedCompany):
                  object.searches,
              RelInfo<Item>.toOneBacklink(
                      7, object.id!, (Item srcObject) => srcObject.company):
                  object.items
            },
        getId: (Company object) => object.id,
        setId: (Company object, int id) {
          object.id = id;
        },
        objectToFB: (Company object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Company()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedCompany>.toOneBacklink(3, object.id!,
                  (SearchedCompany srcObject) => srcObject.searchedCompany),
              store.box<Company>());
          InternalToManyAccess.setRelInfo(
              object.items,
              store,
              RelInfo<Item>.toOneBacklink(
                  7, object.id!, (Item srcObject) => srcObject.company),
              store.box<Company>());
          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[2],
        toOneRelations: (Customer object) => [object.location, object.category],
        toManyRelations: (Customer object) => {
              RelInfo<Receipt>.toOneBacklink(
                      3, object.id!, (Receipt srcObject) => srcObject.customer):
                  object.receipts,
              RelInfo<SearchedCustomer>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedCustomer srcObject) =>
                      srcObject.searchedCustomer): object.searches
            },
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final otherPhoneOffset = object.otherPhone == null
              ? null
              : fbb.writeList(object.otherPhone!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final contactListIdOffset = object.contactListId == null
              ? null
              : fbb.writeString(object.contactListId!);
          final nickNameOffset = object.nickName == null
              ? null
              : fbb.writeString(object.nickName!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final genderOffset =
              object.gender == null ? null : fbb.writeString(object.gender!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final accountOffset = object.account == null
              ? null
              : fbb.writeList(
                  object.account!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(14);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, phoneOffset);
          fbb.addOffset(2, otherPhoneOffset);
          fbb.addOffset(3, contactListIdOffset);
          fbb.addOffset(4, nickNameOffset);
          fbb.addOffset(5, nameOffset);
          fbb.addOffset(6, genderOffset);
          fbb.addOffset(7, addressOffset);
          fbb.addOffset(8, accountOffset);
          fbb.addInt64(9, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(10, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(11, object.location.targetId);
          fbb.addInt64(12, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final object = Customer()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..phone = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..otherPhone = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..contactListId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..nickName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..gender = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..address = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..account = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.location.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.location.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.category.attach(store);
          InternalToManyAccess.setRelInfo(
              object.receipts,
              store,
              RelInfo<Receipt>.toOneBacklink(
                  3, object.id!, (Receipt srcObject) => srcObject.customer),
              store.box<Customer>());
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedCustomer>.toOneBacklink(3, object.id!,
                  (SearchedCustomer srcObject) => srcObject.searchedCustomer),
              store.box<Customer>());
          return object;
        }),
    CustomerCategory: EntityDefinition<CustomerCategory>(
        model: _entities[3],
        toOneRelations: (CustomerCategory object) => [],
        toManyRelations: (CustomerCategory object) => {
              RelInfo<SearchedCustomerCategory>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedCustomerCategory srcObject) =>
                      srcObject.searchedCategory): object.searches,
              RelInfo<Customer>.toOneBacklink(13, object.id!,
                  (Customer srcObject) => srcObject.category): object.customers
            },
        getId: (CustomerCategory object) => object.id,
        setId: (CustomerCategory object, int id) {
          object.id = id;
        },
        objectToFB: (CustomerCategory object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = CustomerCategory()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedCustomerCategory>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedCustomerCategory srcObject) =>
                      srcObject.searchedCategory),
              store.box<CustomerCategory>());
          InternalToManyAccess.setRelInfo(
              object.customers,
              store,
              RelInfo<Customer>.toOneBacklink(
                  13, object.id!, (Customer srcObject) => srcObject.category),
              store.box<CustomerCategory>());
          return object;
        }),
    Diary: EntityDefinition<Diary>(
        model: _entities[4],
        toOneRelations: (Diary object) => [],
        toManyRelations: (Diary object) => {
              RelInfo<SearchedDiary>.toOneBacklink(3, object.id!,
                      (SearchedDiary srcObject) => srcObject.searchedDiary):
                  object.searches
            },
        getId: (Diary object) => object.id,
        setId: (Diary object, int id) {
          object.id = id;
        },
        objectToFB: (Diary object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final contentOffset =
              object.content == null ? null : fbb.writeString(object.content!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addInt64(3, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(4, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Diary()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..content = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedDiary>.toOneBacklink(3, object.id!,
                  (SearchedDiary srcObject) => srcObject.searchedDiary),
              store.box<Diary>());
          return object;
        }),
    Godown: EntityDefinition<Godown>(
        model: _entities[5],
        toOneRelations: (Godown object) => [],
        toManyRelations: (Godown object) => {
              RelInfo<StoreRoom>.toOneBacklink(
                      5, object.id!, (StoreRoom srcObject) => srcObject.godown):
                  object.storeRooms,
              RelInfo<Almirah>.toOneBacklink(
                      7, object.id!, (Almirah srcObject) => srcObject.godown):
                  object.almirahs,
              RelInfo<SearchedGodown>.toOneBacklink(3, object.id!,
                      (SearchedGodown srcObject) => srcObject.searchedGodown):
                  object.searches
            },
        getId: (Godown object) => object.id,
        setId: (Godown object, int id) {
          object.id = id;
        },
        objectToFB: (Godown object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = Godown()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          InternalToManyAccess.setRelInfo(
              object.storeRooms,
              store,
              RelInfo<StoreRoom>.toOneBacklink(
                  5, object.id!, (StoreRoom srcObject) => srcObject.godown),
              store.box<Godown>());
          InternalToManyAccess.setRelInfo(
              object.almirahs,
              store,
              RelInfo<Almirah>.toOneBacklink(
                  7, object.id!, (Almirah srcObject) => srcObject.godown),
              store.box<Godown>());
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedGodown>.toOneBacklink(3, object.id!,
                  (SearchedGodown srcObject) => srcObject.searchedGodown),
              store.box<Godown>());
          return object;
        }),
    Item: EntityDefinition<Item>(
        model: _entities[6],
        toOneRelations: (Item object) => [object.company, object.category],
        toManyRelations: (Item object) => {
              RelInfo<ItemVariant>.toOneBacklink(
                      9, object.id!, (ItemVariant srcObject) => srcObject.item):
                  object.variant
            },
        getId: (Item object) => object.id,
        setId: (Item object, int id) {
          object.id = id;
        },
        objectToFB: (Item object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final alternateNameOffset = object.alternateName == null
              ? null
              : fbb.writeList(object.alternateName!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, alternateNameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(5, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(6, object.company.targetId);
          fbb.addInt64(7, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = Item()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..alternateName = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.company.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.company.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.category.attach(store);
          InternalToManyAccess.setRelInfo(
              object.variant,
              store,
              RelInfo<ItemVariant>.toOneBacklink(
                  9, object.id!, (ItemVariant srcObject) => srcObject.item),
              store.box<Item>());
          return object;
        }),
    ItemCategory: EntityDefinition<ItemCategory>(
        model: _entities[7],
        toOneRelations: (ItemCategory object) => [],
        toManyRelations: (ItemCategory object) => {
              RelInfo<SearchedItemCategory>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedItemCategory srcObject) =>
                      srcObject.searchedCategory): object.searches,
              RelInfo<Item>.toOneBacklink(
                      8, object.id!, (Item srcObject) => srcObject.category):
                  object.items
            },
        getId: (ItemCategory object) => object.id,
        setId: (ItemCategory object, int id) {
          object.id = id;
        },
        objectToFB: (ItemCategory object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = ItemCategory()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedItemCategory>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedItemCategory srcObject) =>
                      srcObject.searchedCategory),
              store.box<ItemCategory>());
          InternalToManyAccess.setRelInfo(
              object.items,
              store,
              RelInfo<Item>.toOneBacklink(
                  8, object.id!, (Item srcObject) => srcObject.category),
              store.box<ItemCategory>());
          return object;
        }),
    ItemVariant: EntityDefinition<ItemVariant>(
        model: _entities[8],
        toOneRelations: (ItemVariant object) =>
            [object.item, object.minimumStockUnit],
        toManyRelations: (ItemVariant object) => {
              RelInfo<ItemVariant>.toMany(8, object.id!): object.orderedAs,
              RelInfo<PurchasedItem>.toOneBacklink(16, object.id!,
                      (PurchasedItem srcObject) => srcObject.purchasedItem):
                  object.purchasedRecord,
              RelInfo<SearchedItem>.toOneBacklink(3, object.id!,
                      (SearchedItem srcObject) => srcObject.searchedItem):
                  object.searches
            },
        getId: (ItemVariant object) => object.id,
        setId: (ItemVariant object, int id) {
          object.id = id;
        },
        objectToFB: (ItemVariant object, fb.Builder fbb) {
          final sizeOffset =
              object.size == null ? null : fbb.writeString(object.size!);
          final colorOffset =
              object.color == null ? null : fbb.writeString(object.color!);
          final modelOffset =
              object.model == null ? null : fbb.writeString(object.model!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, sizeOffset);
          fbb.addOffset(2, colorOffset);
          fbb.addOffset(3, modelOffset);
          fbb.addFloat64(4, object.minimumStock);
          fbb.addOffset(5, descriptionOffset);
          fbb.addInt64(6, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(7, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(8, object.item.targetId);
          fbb.addInt64(9, object.minimumStockUnit.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = ItemVariant()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..size = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..color = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..model = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..minimumStock = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 12)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.item.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.item.attach(store);
          object.minimumStockUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.minimumStockUnit.attach(store);
          InternalToManyAccess.setRelInfo(
              object.orderedAs,
              store,
              RelInfo<ItemVariant>.toMany(8, object.id!),
              store.box<ItemVariant>());
          InternalToManyAccess.setRelInfo(
              object.purchasedRecord,
              store,
              RelInfo<PurchasedItem>.toOneBacklink(16, object.id!,
                  (PurchasedItem srcObject) => srcObject.purchasedItem),
              store.box<ItemVariant>());
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedItem>.toOneBacklink(3, object.id!,
                  (SearchedItem srcObject) => srcObject.searchedItem),
              store.box<ItemVariant>());
          return object;
        }),
    Location: EntityDefinition<Location>(
        model: _entities[9],
        toOneRelations: (Location object) => [object.pin],
        toManyRelations: (Location object) => {},
        getId: (Location object) => object.id,
        setId: (Location object, int id) {
          object.id = id;
        },
        objectToFB: (Location object, fb.Builder fbb) {
          final areaOffset =
              object.area == null ? null : fbb.writeString(object.area!);
          final villageOffset =
              object.village == null ? null : fbb.writeString(object.village!);
          final panchayatOffset = object.panchayat == null
              ? null
              : fbb.writeString(object.panchayat!);
          final blockOffset =
              object.block == null ? null : fbb.writeString(object.block!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, areaOffset);
          fbb.addOffset(2, villageOffset);
          fbb.addOffset(3, panchayatOffset);
          fbb.addOffset(4, blockOffset);
          fbb.addInt64(5, object.pin.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Location()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..area = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..village = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..panchayat = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..block = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);
          object.pin.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.pin.attach(store);
          return object;
        }),
    Pincode: EntityDefinition<Pincode>(
        model: _entities[10],
        toOneRelations: (Pincode object) => [],
        toManyRelations: (Pincode object) => {
              RelInfo<Location>.toOneBacklink(
                      6, object.id!, (Location srcObject) => srcObject.pin):
                  object.locations
            },
        getId: (Pincode object) => object.id,
        setId: (Pincode object, int id) {
          object.id = id;
        },
        objectToFB: (Pincode object, fb.Builder fbb) {
          final pincodeOffset =
              object.pincode == null ? null : fbb.writeString(object.pincode!);
          final districtOffset = object.district == null
              ? null
              : fbb.writeString(object.district!);
          final stateOffset =
              object.state == null ? null : fbb.writeString(object.state!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, pincodeOffset);
          fbb.addOffset(2, districtOffset);
          fbb.addOffset(3, stateOffset);
          fbb.addOffset(4, countryOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Pincode()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..pincode = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..district = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..state = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..country = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12);
          InternalToManyAccess.setRelInfo(
              object.locations,
              store,
              RelInfo<Location>.toOneBacklink(
                  6, object.id!, (Location srcObject) => srcObject.pin),
              store.box<Pincode>());
          return object;
        }),
    PurchasedItem: EntityDefinition<PurchasedItem>(
        model: _entities[11],
        toOneRelations: (PurchasedItem object) => [
              object.sellingPriceUnit,
              object.purchasingPriceUnit,
              object.purchasedQuantityUnit,
              object.currentQuantityUnit,
              object.purchasedItem,
              object.suppliedBy
            ],
        toManyRelations: (PurchasedItem object) => {
              RelInfo<PurchasedItem>.toMany(3, object.id!): object.almirah,
              RelInfo<PurchasedItem>.toMany(4, object.id!): object.storeRoom,
              RelInfo<PurchasedItem>.toMany(5, object.id!): object.godowns,
              RelInfo<SearchedPurchasedItem>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedPurchasedItem srcObject) =>
                      srcObject.searchedPurchasedItem): object.searches
            },
        getId: (PurchasedItem object) => object.id,
        setId: (PurchasedItem object, int id) {
          object.id = id;
        },
        objectToFB: (PurchasedItem object, fb.Builder fbb) {
          fbb.startTable(18);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.purchasedDate?.millisecondsSinceEpoch);
          fbb.addInt64(2, object.dateOfExpiry?.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.purchasingPrice);
          fbb.addFloat64(4, object.purchasedQuantity);
          fbb.addFloat64(5, object.currentQuantity);
          fbb.addFloat64(6, object.sellingPrice);
          fbb.addInt64(7, object.row);
          fbb.addInt64(8, object.column);
          fbb.addInt64(9, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(10, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(11, object.sellingPriceUnit.targetId);
          fbb.addInt64(12, object.purchasingPriceUnit.targetId);
          fbb.addInt64(13, object.purchasedQuantityUnit.targetId);
          fbb.addInt64(14, object.currentQuantityUnit.targetId);
          fbb.addInt64(15, object.purchasedItem.targetId);
          fbb.addInt64(16, object.suppliedBy.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final purchasedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final dateOfExpiryValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final object = PurchasedItem()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..purchasedDate = purchasedDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(purchasedDateValue)
            ..dateOfExpiry = dateOfExpiryValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfExpiryValue)
            ..purchasingPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..purchasedQuantity = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 12)
            ..currentQuantity = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 14)
            ..sellingPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..row =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..column =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.sellingPriceUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.sellingPriceUnit.attach(store);
          object.purchasingPriceUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.purchasingPriceUnit.attach(store);
          object.purchasedQuantityUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.purchasedQuantityUnit.attach(store);
          object.currentQuantityUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          object.currentQuantityUnit.attach(store);
          object.purchasedItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
          object.purchasedItem.attach(store);
          object.suppliedBy.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.suppliedBy.attach(store);
          InternalToManyAccess.setRelInfo(
              object.almirah,
              store,
              RelInfo<PurchasedItem>.toMany(3, object.id!),
              store.box<PurchasedItem>());
          InternalToManyAccess.setRelInfo(
              object.storeRoom,
              store,
              RelInfo<PurchasedItem>.toMany(4, object.id!),
              store.box<PurchasedItem>());
          InternalToManyAccess.setRelInfo(
              object.godowns,
              store,
              RelInfo<PurchasedItem>.toMany(5, object.id!),
              store.box<PurchasedItem>());
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedPurchasedItem>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedPurchasedItem srcObject) =>
                      srcObject.searchedPurchasedItem),
              store.box<PurchasedItem>());
          return object;
        }),
    Receipt: EntityDefinition<Receipt>(
        model: _entities[12],
        toOneRelations: (Receipt object) =>
            [object.receiptInfo, object.customer],
        toManyRelations: (Receipt object) =>
            {RelInfo<Receipt>.toMany(7, object.id!): object.receiptItems},
        getId: (Receipt object) => object.id,
        setId: (Receipt object, int id) {
          object.id = id;
        },
        objectToFB: (Receipt object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.receiptInfo.targetId);
          fbb.addInt64(2, object.customer.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Receipt()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          object.receiptInfo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.receiptInfo.attach(store);
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.customer.attach(store);
          InternalToManyAccess.setRelInfo(object.receiptItems, store,
              RelInfo<Receipt>.toMany(7, object.id!), store.box<Receipt>());
          return object;
        }),
    ReceiptInfo: EntityDefinition<ReceiptInfo>(
        model: _entities[13],
        toOneRelations: (ReceiptInfo object) => [],
        toManyRelations: (ReceiptInfo object) => {},
        getId: (ReceiptInfo object) => object.id,
        setId: (ReceiptInfo object, int id) {
          object.id = id;
        },
        objectToFB: (ReceiptInfo object, fb.Builder fbb) {
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final numberOffset =
              object.number == null ? null : fbb.writeString(object.number!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addOffset(3, numberOffset);
          fbb.addFloat64(4, object.due);
          fbb.addInt64(5, object.dueDate?.millisecondsSinceEpoch);
          fbb.addFloat64(6, object.totalDiscount);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dueDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = ReceiptInfo()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..number = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..due = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 12)
            ..dueDate = dueDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dueDateValue)
            ..totalDiscount = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16);

          return object;
        }),
    ReceiptItem: EntityDefinition<ReceiptItem>(
        model: _entities[14],
        toOneRelations: (ReceiptItem object) => [object.unit, object.item],
        toManyRelations: (ReceiptItem object) => {},
        getId: (ReceiptItem object) => object.id,
        setId: (ReceiptItem object, int id) {
          object.id = id;
        },
        objectToFB: (ReceiptItem object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.quantity);
          fbb.addFloat64(2, object.soldPrice);
          fbb.addInt64(3, object.unit.targetId);
          fbb.addInt64(4, object.item.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ReceiptItem()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..quantity = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..soldPrice = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 8);
          object.unit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.unit.attach(store);
          object.item.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.item.attach(store);
          return object;
        }),
    SearchedAlmirah: EntityDefinition<SearchedAlmirah>(
        model: _entities[15],
        toOneRelations: (SearchedAlmirah object) => [object.searchedAlmirah],
        toManyRelations: (SearchedAlmirah object) => {},
        getId: (SearchedAlmirah object) => object.id,
        setId: (SearchedAlmirah object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedAlmirah object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedAlmirah.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedAlmirah()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedAlmirah.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedAlmirah.attach(store);
          return object;
        }),
    SearchedCompany: EntityDefinition<SearchedCompany>(
        model: _entities[16],
        toOneRelations: (SearchedCompany object) => [object.searchedCompany],
        toManyRelations: (SearchedCompany object) => {},
        getId: (SearchedCompany object) => object.id,
        setId: (SearchedCompany object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedCompany object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedCompany.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedCompany()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedCompany.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedCompany.attach(store);
          return object;
        }),
    SearchedCustomer: EntityDefinition<SearchedCustomer>(
        model: _entities[17],
        toOneRelations: (SearchedCustomer object) => [object.searchedCustomer],
        toManyRelations: (SearchedCustomer object) => {},
        getId: (SearchedCustomer object) => object.id,
        setId: (SearchedCustomer object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedCustomer object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedCustomer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedCustomer(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedCustomer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedCustomer.attach(store);
          return object;
        }),
    SearchedCustomerCategory: EntityDefinition<SearchedCustomerCategory>(
        model: _entities[18],
        toOneRelations: (SearchedCustomerCategory object) =>
            [object.searchedCategory],
        toManyRelations: (SearchedCustomerCategory object) => {},
        getId: (SearchedCustomerCategory object) => object.id,
        setId: (SearchedCustomerCategory object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedCustomerCategory object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedCategory.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedCustomerCategory()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedCategory.attach(store);
          return object;
        }),
    SearchedDiary: EntityDefinition<SearchedDiary>(
        model: _entities[19],
        toOneRelations: (SearchedDiary object) => [object.searchedDiary],
        toManyRelations: (SearchedDiary object) => {},
        getId: (SearchedDiary object) => object.id,
        setId: (SearchedDiary object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedDiary object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedDiary.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedDiary()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedDiary.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedDiary.attach(store);
          return object;
        }),
    SearchedGodown: EntityDefinition<SearchedGodown>(
        model: _entities[20],
        toOneRelations: (SearchedGodown object) => [object.searchedGodown],
        toManyRelations: (SearchedGodown object) => {},
        getId: (SearchedGodown object) => object.id,
        setId: (SearchedGodown object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedGodown object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedGodown.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedGodown()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedGodown.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedGodown.attach(store);
          return object;
        }),
    SearchedItem: EntityDefinition<SearchedItem>(
        model: _entities[21],
        toOneRelations: (SearchedItem object) => [object.searchedItem],
        toManyRelations: (SearchedItem object) => {},
        getId: (SearchedItem object) => object.id,
        setId: (SearchedItem object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedItem object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedItem.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedItem()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedItem.attach(store);
          return object;
        }),
    SearchedItemCategory: EntityDefinition<SearchedItemCategory>(
        model: _entities[22],
        toOneRelations: (SearchedItemCategory object) =>
            [object.searchedCategory],
        toManyRelations: (SearchedItemCategory object) => {},
        getId: (SearchedItemCategory object) => object.id,
        setId: (SearchedItemCategory object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedItemCategory object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedCategory.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedItemCategory()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedCategory.attach(store);
          return object;
        }),
    SearchedItemVariant: EntityDefinition<SearchedItemVariant>(
        model: _entities[23],
        toOneRelations: (SearchedItemVariant object) =>
            [object.searchedItemVariant],
        toManyRelations: (SearchedItemVariant object) => {},
        getId: (SearchedItemVariant object) => object.id,
        setId: (SearchedItemVariant object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedItemVariant object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedItemVariant.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedItemVariant()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedItemVariant.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedItemVariant.attach(store);
          return object;
        }),
    SearchedPurchasedItem: EntityDefinition<SearchedPurchasedItem>(
        model: _entities[24],
        toOneRelations: (SearchedPurchasedItem object) =>
            [object.searchedPurchasedItem],
        toManyRelations: (SearchedPurchasedItem object) => {},
        getId: (SearchedPurchasedItem object) => object.id,
        setId: (SearchedPurchasedItem object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedPurchasedItem object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedPurchasedItem.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedPurchasedItem()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedPurchasedItem.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedPurchasedItem.attach(store);
          return object;
        }),
    SearchedReceipt: EntityDefinition<SearchedReceipt>(
        model: _entities[25],
        toOneRelations: (SearchedReceipt object) => [object.searchedReceipt],
        toManyRelations: (SearchedReceipt object) => {},
        getId: (SearchedReceipt object) => object.id,
        setId: (SearchedReceipt object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedReceipt object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedReceipt.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedReceipt()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedReceipt.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedReceipt.attach(store);
          return object;
        }),
    SearchedStoreRoom: EntityDefinition<SearchedStoreRoom>(
        model: _entities[26],
        toOneRelations: (SearchedStoreRoom object) =>
            [object.searchedStoreRoom],
        toManyRelations: (SearchedStoreRoom object) => {},
        getId: (SearchedStoreRoom object) => object.id,
        setId: (SearchedStoreRoom object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedStoreRoom object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedStoreRoom.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedStoreRoom()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedStoreRoom.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedStoreRoom.attach(store);
          return object;
        }),
    SearchedSupplier: EntityDefinition<SearchedSupplier>(
        model: _entities[27],
        toOneRelations: (SearchedSupplier object) => [object.searchedSupplier],
        toManyRelations: (SearchedSupplier object) => {},
        getId: (SearchedSupplier object) => object.id,
        setId: (SearchedSupplier object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedSupplier object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedSupplier.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedSupplier()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedSupplier.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedSupplier.attach(store);
          return object;
        }),
    SearchedUnit: EntityDefinition<SearchedUnit>(
        model: _entities[28],
        toOneRelations: (SearchedUnit object) => [object.searchedUnit],
        toManyRelations: (SearchedUnit object) => {},
        getId: (SearchedUnit object) => object.id,
        setId: (SearchedUnit object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedUnit object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedUnit.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedUnit()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedUnit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedUnit.attach(store);
          return object;
        }),
    StoreRoom: EntityDefinition<StoreRoom>(
        model: _entities[29],
        toOneRelations: (StoreRoom object) => [object.godown],
        toManyRelations: (StoreRoom object) => {
              RelInfo<SearchedStoreRoom>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedStoreRoom srcObject) =>
                      srcObject.searchedStoreRoom): object.searches,
              RelInfo<Almirah>.toOneBacklink(
                      8, object.id!, (Almirah srcObject) => srcObject.room):
                  object.almirahs
            },
        getId: (StoreRoom object) => object.id,
        setId: (StoreRoom object, int id) {
          object.id = id;
        },
        objectToFB: (StoreRoom object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.godown.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = StoreRoom()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.godown.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.godown.attach(store);
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedStoreRoom>.toOneBacklink(3, object.id!,
                  (SearchedStoreRoom srcObject) => srcObject.searchedStoreRoom),
              store.box<StoreRoom>());
          InternalToManyAccess.setRelInfo(
              object.almirahs,
              store,
              RelInfo<Almirah>.toOneBacklink(
                  8, object.id!, (Almirah srcObject) => srcObject.room),
              store.box<StoreRoom>());
          return object;
        }),
    Supplier: EntityDefinition<Supplier>(
        model: _entities[30],
        toOneRelations: (Supplier object) => [object.location],
        toManyRelations: (Supplier object) => {
              RelInfo<PurchasedItem>.toOneBacklink(17, object.id!,
                      (PurchasedItem srcObject) => srcObject.suppliedBy):
                  object.suppliedItems,
              RelInfo<SearchedSupplier>.toOneBacklink(
                  3,
                  object.id!,
                  (SearchedSupplier srcObject) =>
                      srcObject.searchedSupplier): object.searches
            },
        getId: (Supplier object) => object.id,
        setId: (Supplier object, int id) {
          object.id = id;
        },
        objectToFB: (Supplier object, fb.Builder fbb) {
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final otherPhoneOffset = object.otherPhone == null
              ? null
              : fbb.writeList(object.otherPhone!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final contactListIdOffset = object.contactListId == null
              ? null
              : fbb.writeString(object.contactListId!);
          final nickNameOffset = object.nickName == null
              ? null
              : fbb.writeString(object.nickName!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final accountOffset = object.account == null
              ? null
              : fbb.writeList(
                  object.account!.map(fbb.writeString).toList(growable: false));
          final shopOrBusinessNameOffset = object.shopOrBusinessName == null
              ? null
              : fbb.writeString(object.shopOrBusinessName!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, phoneOffset);
          fbb.addOffset(2, otherPhoneOffset);
          fbb.addOffset(3, contactListIdOffset);
          fbb.addOffset(4, nickNameOffset);
          fbb.addOffset(5, nameOffset);
          fbb.addOffset(6, addressOffset);
          fbb.addOffset(7, accountOffset);
          fbb.addInt64(8, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(9, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(10, object.location.targetId);
          fbb.addOffset(11, shopOrBusinessNameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
          final object = Supplier()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..phone = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..otherPhone = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..contactListId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..nickName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..address = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 16)
            ..account = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 18)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue)
            ..shopOrBusinessName =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGetNullable(buffer, rootOffset, 26);
          object.location.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.location.attach(store);
          InternalToManyAccess.setRelInfo(
              object.suppliedItems,
              store,
              RelInfo<PurchasedItem>.toOneBacklink(17, object.id!,
                  (PurchasedItem srcObject) => srcObject.suppliedBy),
              store.box<Supplier>());
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedSupplier>.toOneBacklink(3, object.id!,
                  (SearchedSupplier srcObject) => srcObject.searchedSupplier),
              store.box<Supplier>());
          return object;
        }),
    Unit: EntityDefinition<Unit>(
        model: _entities[31],
        toOneRelations: (Unit object) => [],
        toManyRelations: (Unit object) => {
              RelInfo<SearchedUnit>.toOneBacklink(3, object.id!,
                      (SearchedUnit srcObject) => srcObject.searchedUnit):
                  object.searches
            },
        getId: (Unit object) => object.id,
        setId: (Unit object, int id) {
          object.id = id;
        },
        objectToFB: (Unit object, fb.Builder fbb) {
          final fullNameOffset = object.fullName == null
              ? null
              : fbb.writeString(object.fullName!);
          final shortNameOffset = object.shortName == null
              ? null
              : fbb.writeString(object.shortName!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, fullNameOffset);
          fbb.addOffset(2, shortNameOffset);
          fbb.addInt64(3, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(4, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final object = Unit()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..fullName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..shortName = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          InternalToManyAccess.setRelInfo(
              object.searches,
              store,
              RelInfo<SearchedUnit>.toOneBacklink(3, object.id!,
                  (SearchedUnit srcObject) => srcObject.searchedUnit),
              store.box<Unit>());
          return object;
        }),
    UnitRelation: EntityDefinition<UnitRelation>(
        model: _entities[32],
        toOneRelations: (UnitRelation object) =>
            [object.unitFrom, object.unitTo],
        toManyRelations: (UnitRelation object) => {},
        getId: (UnitRelation object) => object.id,
        setId: (UnitRelation object, int id) {
          object.id = id;
        },
        objectToFB: (UnitRelation object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.value);
          fbb.addInt64(2, object.unitFrom.targetId);
          fbb.addInt64(3, object.unitTo.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UnitRelation()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..value = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6);
          object.unitFrom.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.unitFrom.attach(store);
          object.unitTo.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.unitTo.attach(store);
          return object;
        }),
    PurchaseOrder: EntityDefinition<PurchaseOrder>(
        model: _entities[33],
        toOneRelations: (PurchaseOrder object) => [object.supplier],
        toManyRelations: (PurchaseOrder object) =>
            {RelInfo<PurchaseOrder>.toMany(9, object.id!): object.orderedItems},
        getId: (PurchaseOrder object) => object.id,
        setId: (PurchaseOrder object, int id) {
          object.id = id;
        },
        objectToFB: (PurchaseOrder object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(2, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(3, object.supplier.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = PurchaseOrder()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.supplier.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.supplier.attach(store);
          InternalToManyAccess.setRelInfo(
              object.orderedItems,
              store,
              RelInfo<PurchaseOrder>.toMany(9, object.id!),
              store.box<PurchaseOrder>());
          return object;
        }),
    PurchaseOrderItem: EntityDefinition<PurchaseOrderItem>(
        model: _entities[34],
        toOneRelations: (PurchaseOrderItem object) =>
            [object.unit, object.item, object.orderedIn],
        toManyRelations: (PurchaseOrderItem object) => {},
        getId: (PurchaseOrderItem object) => object.id,
        setId: (PurchaseOrderItem object, int id) {
          object.id = id;
        },
        objectToFB: (PurchaseOrderItem object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addFloat64(1, object.quantity);
          fbb.addInt64(2, object.dateOfCreation.millisecondsSinceEpoch);
          fbb.addInt64(3, object.dateOfUpdation?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.unit.targetId);
          fbb.addInt64(5, object.item.targetId);
          fbb.addInt64(6, object.orderedIn.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOfUpdationValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final object = PurchaseOrderItem()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..quantity = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 6)
            ..dateOfCreation = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..dateOfUpdation = dateOfUpdationValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateOfUpdationValue);
          object.unit.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.unit.attach(store);
          object.item.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.item.attach(store);
          object.orderedIn.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.orderedIn.attach(store);
          return object;
        }),
    SearchedPurchaseOrder: EntityDefinition<SearchedPurchaseOrder>(
        model: _entities[35],
        toOneRelations: (SearchedPurchaseOrder object) =>
            [object.searchedOrder],
        toManyRelations: (SearchedPurchaseOrder object) => {},
        getId: (SearchedPurchaseOrder object) => object.id,
        setId: (SearchedPurchaseOrder object, int id) {
          object.id = id;
        },
        objectToFB: (SearchedPurchaseOrder object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.datetime.millisecondsSinceEpoch);
          fbb.addInt64(2, object.searchedOrder.targetId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SearchedPurchaseOrder()
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..datetime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.searchedOrder.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.searchedOrder.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Almirah] entity fields to define ObjectBox queries.
class Almirah_ {
  /// see [Almirah.id]
  static final id = QueryIntegerProperty<Almirah>(_entities[0].properties[0]);

  /// see [Almirah.name]
  static final name = QueryStringProperty<Almirah>(_entities[0].properties[1]);

  /// see [Almirah.row]
  static final row = QueryIntegerProperty<Almirah>(_entities[0].properties[2]);

  /// see [Almirah.column]
  static final column =
      QueryIntegerProperty<Almirah>(_entities[0].properties[3]);

  /// see [Almirah.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Almirah>(_entities[0].properties[4]);

  /// see [Almirah.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Almirah>(_entities[0].properties[5]);

  /// see [Almirah.godown]
  static final godown =
      QueryRelationToOne<Almirah, Godown>(_entities[0].properties[6]);

  /// see [Almirah.room]
  static final room =
      QueryRelationToOne<Almirah, StoreRoom>(_entities[0].properties[7]);

  /// see [Almirah.items]
  static final items =
      QueryRelationToMany<Almirah, Item>(_entities[0].relations[0]);
}

/// [Company] entity fields to define ObjectBox queries.
class Company_ {
  /// see [Company.id]
  static final id = QueryIntegerProperty<Company>(_entities[1].properties[0]);

  /// see [Company.name]
  static final name = QueryStringProperty<Company>(_entities[1].properties[1]);

  /// see [Company.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Company>(_entities[1].properties[2]);

  /// see [Company.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Company>(_entities[1].properties[3]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[2].properties[0]);

  /// see [Customer.phone]
  static final phone =
      QueryStringProperty<Customer>(_entities[2].properties[1]);

  /// see [Customer.otherPhone]
  static final otherPhone =
      QueryStringVectorProperty<Customer>(_entities[2].properties[2]);

  /// see [Customer.contactListId]
  static final contactListId =
      QueryStringProperty<Customer>(_entities[2].properties[3]);

  /// see [Customer.nickName]
  static final nickName =
      QueryStringProperty<Customer>(_entities[2].properties[4]);

  /// see [Customer.name]
  static final name = QueryStringProperty<Customer>(_entities[2].properties[5]);

  /// see [Customer.gender]
  static final gender =
      QueryStringProperty<Customer>(_entities[2].properties[6]);

  /// see [Customer.address]
  static final address =
      QueryStringProperty<Customer>(_entities[2].properties[7]);

  /// see [Customer.account]
  static final account =
      QueryStringVectorProperty<Customer>(_entities[2].properties[8]);

  /// see [Customer.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Customer>(_entities[2].properties[9]);

  /// see [Customer.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Customer>(_entities[2].properties[10]);

  /// see [Customer.location]
  static final location =
      QueryRelationToOne<Customer, Location>(_entities[2].properties[11]);

  /// see [Customer.category]
  static final category = QueryRelationToOne<Customer, CustomerCategory>(
      _entities[2].properties[12]);
}

/// [CustomerCategory] entity fields to define ObjectBox queries.
class CustomerCategory_ {
  /// see [CustomerCategory.id]
  static final id =
      QueryIntegerProperty<CustomerCategory>(_entities[3].properties[0]);

  /// see [CustomerCategory.name]
  static final name =
      QueryStringProperty<CustomerCategory>(_entities[3].properties[1]);

  /// see [CustomerCategory.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<CustomerCategory>(_entities[3].properties[2]);

  /// see [CustomerCategory.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<CustomerCategory>(_entities[3].properties[3]);
}

/// [Diary] entity fields to define ObjectBox queries.
class Diary_ {
  /// see [Diary.id]
  static final id = QueryIntegerProperty<Diary>(_entities[4].properties[0]);

  /// see [Diary.title]
  static final title = QueryStringProperty<Diary>(_entities[4].properties[1]);

  /// see [Diary.content]
  static final content = QueryStringProperty<Diary>(_entities[4].properties[2]);

  /// see [Diary.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Diary>(_entities[4].properties[3]);

  /// see [Diary.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Diary>(_entities[4].properties[4]);
}

/// [Godown] entity fields to define ObjectBox queries.
class Godown_ {
  /// see [Godown.id]
  static final id = QueryIntegerProperty<Godown>(_entities[5].properties[0]);

  /// see [Godown.name]
  static final name = QueryStringProperty<Godown>(_entities[5].properties[1]);

  /// see [Godown.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Godown>(_entities[5].properties[2]);

  /// see [Godown.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Godown>(_entities[5].properties[3]);
}

/// [Item] entity fields to define ObjectBox queries.
class Item_ {
  /// see [Item.id]
  static final id = QueryIntegerProperty<Item>(_entities[6].properties[0]);

  /// see [Item.name]
  static final name = QueryStringProperty<Item>(_entities[6].properties[1]);

  /// see [Item.alternateName]
  static final alternateName =
      QueryStringVectorProperty<Item>(_entities[6].properties[2]);

  /// see [Item.description]
  static final description =
      QueryStringProperty<Item>(_entities[6].properties[3]);

  /// see [Item.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Item>(_entities[6].properties[4]);

  /// see [Item.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Item>(_entities[6].properties[5]);

  /// see [Item.company]
  static final company =
      QueryRelationToOne<Item, Company>(_entities[6].properties[6]);

  /// see [Item.category]
  static final category =
      QueryRelationToOne<Item, ItemCategory>(_entities[6].properties[7]);
}

/// [ItemCategory] entity fields to define ObjectBox queries.
class ItemCategory_ {
  /// see [ItemCategory.id]
  static final id =
      QueryIntegerProperty<ItemCategory>(_entities[7].properties[0]);

  /// see [ItemCategory.name]
  static final name =
      QueryStringProperty<ItemCategory>(_entities[7].properties[1]);

  /// see [ItemCategory.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<ItemCategory>(_entities[7].properties[2]);

  /// see [ItemCategory.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<ItemCategory>(_entities[7].properties[3]);
}

/// [ItemVariant] entity fields to define ObjectBox queries.
class ItemVariant_ {
  /// see [ItemVariant.id]
  static final id =
      QueryIntegerProperty<ItemVariant>(_entities[8].properties[0]);

  /// see [ItemVariant.size]
  static final size =
      QueryStringProperty<ItemVariant>(_entities[8].properties[1]);

  /// see [ItemVariant.color]
  static final color =
      QueryStringProperty<ItemVariant>(_entities[8].properties[2]);

  /// see [ItemVariant.model]
  static final model =
      QueryStringProperty<ItemVariant>(_entities[8].properties[3]);

  /// see [ItemVariant.minimumStock]
  static final minimumStock =
      QueryDoubleProperty<ItemVariant>(_entities[8].properties[4]);

  /// see [ItemVariant.description]
  static final description =
      QueryStringProperty<ItemVariant>(_entities[8].properties[5]);

  /// see [ItemVariant.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<ItemVariant>(_entities[8].properties[6]);

  /// see [ItemVariant.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<ItemVariant>(_entities[8].properties[7]);

  /// see [ItemVariant.item]
  static final item =
      QueryRelationToOne<ItemVariant, Item>(_entities[8].properties[8]);

  /// see [ItemVariant.minimumStockUnit]
  static final minimumStockUnit =
      QueryRelationToOne<ItemVariant, Unit>(_entities[8].properties[9]);

  /// see [ItemVariant.orderedAs]
  static final orderedAs = QueryRelationToMany<ItemVariant, PurchaseOrderItem>(
      _entities[8].relations[0]);
}

/// [Location] entity fields to define ObjectBox queries.
class Location_ {
  /// see [Location.id]
  static final id = QueryIntegerProperty<Location>(_entities[9].properties[0]);

  /// see [Location.area]
  static final area = QueryStringProperty<Location>(_entities[9].properties[1]);

  /// see [Location.village]
  static final village =
      QueryStringProperty<Location>(_entities[9].properties[2]);

  /// see [Location.panchayat]
  static final panchayat =
      QueryStringProperty<Location>(_entities[9].properties[3]);

  /// see [Location.block]
  static final block =
      QueryStringProperty<Location>(_entities[9].properties[4]);

  /// see [Location.pin]
  static final pin =
      QueryRelationToOne<Location, Pincode>(_entities[9].properties[5]);
}

/// [Pincode] entity fields to define ObjectBox queries.
class Pincode_ {
  /// see [Pincode.id]
  static final id = QueryIntegerProperty<Pincode>(_entities[10].properties[0]);

  /// see [Pincode.pincode]
  static final pincode =
      QueryStringProperty<Pincode>(_entities[10].properties[1]);

  /// see [Pincode.district]
  static final district =
      QueryStringProperty<Pincode>(_entities[10].properties[2]);

  /// see [Pincode.state]
  static final state =
      QueryStringProperty<Pincode>(_entities[10].properties[3]);

  /// see [Pincode.country]
  static final country =
      QueryStringProperty<Pincode>(_entities[10].properties[4]);
}

/// [PurchasedItem] entity fields to define ObjectBox queries.
class PurchasedItem_ {
  /// see [PurchasedItem.id]
  static final id =
      QueryIntegerProperty<PurchasedItem>(_entities[11].properties[0]);

  /// see [PurchasedItem.purchasedDate]
  static final purchasedDate =
      QueryIntegerProperty<PurchasedItem>(_entities[11].properties[1]);

  /// see [PurchasedItem.dateOfExpiry]
  static final dateOfExpiry =
      QueryIntegerProperty<PurchasedItem>(_entities[11].properties[2]);

  /// see [PurchasedItem.purchasingPrice]
  static final purchasingPrice =
      QueryDoubleProperty<PurchasedItem>(_entities[11].properties[3]);

  /// see [PurchasedItem.purchasedQuantity]
  static final purchasedQuantity =
      QueryDoubleProperty<PurchasedItem>(_entities[11].properties[4]);

  /// see [PurchasedItem.currentQuantity]
  static final currentQuantity =
      QueryDoubleProperty<PurchasedItem>(_entities[11].properties[5]);

  /// see [PurchasedItem.sellingPrice]
  static final sellingPrice =
      QueryDoubleProperty<PurchasedItem>(_entities[11].properties[6]);

  /// see [PurchasedItem.row]
  static final row =
      QueryIntegerProperty<PurchasedItem>(_entities[11].properties[7]);

  /// see [PurchasedItem.column]
  static final column =
      QueryIntegerProperty<PurchasedItem>(_entities[11].properties[8]);

  /// see [PurchasedItem.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<PurchasedItem>(_entities[11].properties[9]);

  /// see [PurchasedItem.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<PurchasedItem>(_entities[11].properties[10]);

  /// see [PurchasedItem.sellingPriceUnit]
  static final sellingPriceUnit =
      QueryRelationToOne<PurchasedItem, Unit>(_entities[11].properties[11]);

  /// see [PurchasedItem.purchasingPriceUnit]
  static final purchasingPriceUnit =
      QueryRelationToOne<PurchasedItem, Unit>(_entities[11].properties[12]);

  /// see [PurchasedItem.purchasedQuantityUnit]
  static final purchasedQuantityUnit =
      QueryRelationToOne<PurchasedItem, Unit>(_entities[11].properties[13]);

  /// see [PurchasedItem.currentQuantityUnit]
  static final currentQuantityUnit =
      QueryRelationToOne<PurchasedItem, Unit>(_entities[11].properties[14]);

  /// see [PurchasedItem.purchasedItem]
  static final purchasedItem = QueryRelationToOne<PurchasedItem, ItemVariant>(
      _entities[11].properties[15]);

  /// see [PurchasedItem.suppliedBy]
  static final suppliedBy =
      QueryRelationToOne<PurchasedItem, Supplier>(_entities[11].properties[16]);

  /// see [PurchasedItem.almirah]
  static final almirah =
      QueryRelationToMany<PurchasedItem, Almirah>(_entities[11].relations[0]);

  /// see [PurchasedItem.storeRoom]
  static final storeRoom =
      QueryRelationToMany<PurchasedItem, StoreRoom>(_entities[11].relations[1]);

  /// see [PurchasedItem.godowns]
  static final godowns =
      QueryRelationToMany<PurchasedItem, Godown>(_entities[11].relations[2]);
}

/// [Receipt] entity fields to define ObjectBox queries.
class Receipt_ {
  /// see [Receipt.id]
  static final id = QueryIntegerProperty<Receipt>(_entities[12].properties[0]);

  /// see [Receipt.receiptInfo]
  static final receiptInfo =
      QueryRelationToOne<Receipt, ReceiptInfo>(_entities[12].properties[1]);

  /// see [Receipt.customer]
  static final customer =
      QueryRelationToOne<Receipt, Customer>(_entities[12].properties[2]);

  /// see [Receipt.receiptItems]
  static final receiptItems =
      QueryRelationToMany<Receipt, ReceiptItem>(_entities[12].relations[0]);
}

/// [ReceiptInfo] entity fields to define ObjectBox queries.
class ReceiptInfo_ {
  /// see [ReceiptInfo.id]
  static final id =
      QueryIntegerProperty<ReceiptInfo>(_entities[13].properties[0]);

  /// see [ReceiptInfo.description]
  static final description =
      QueryStringProperty<ReceiptInfo>(_entities[13].properties[1]);

  /// see [ReceiptInfo.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<ReceiptInfo>(_entities[13].properties[2]);

  /// see [ReceiptInfo.number]
  static final number =
      QueryStringProperty<ReceiptInfo>(_entities[13].properties[3]);

  /// see [ReceiptInfo.due]
  static final due =
      QueryDoubleProperty<ReceiptInfo>(_entities[13].properties[4]);

  /// see [ReceiptInfo.dueDate]
  static final dueDate =
      QueryIntegerProperty<ReceiptInfo>(_entities[13].properties[5]);

  /// see [ReceiptInfo.totalDiscount]
  static final totalDiscount =
      QueryDoubleProperty<ReceiptInfo>(_entities[13].properties[6]);
}

/// [ReceiptItem] entity fields to define ObjectBox queries.
class ReceiptItem_ {
  /// see [ReceiptItem.id]
  static final id =
      QueryIntegerProperty<ReceiptItem>(_entities[14].properties[0]);

  /// see [ReceiptItem.quantity]
  static final quantity =
      QueryDoubleProperty<ReceiptItem>(_entities[14].properties[1]);

  /// see [ReceiptItem.soldPrice]
  static final soldPrice =
      QueryDoubleProperty<ReceiptItem>(_entities[14].properties[2]);

  /// see [ReceiptItem.unit]
  static final unit =
      QueryRelationToOne<ReceiptItem, Unit>(_entities[14].properties[3]);

  /// see [ReceiptItem.item]
  static final item = QueryRelationToOne<ReceiptItem, PurchasedItem>(
      _entities[14].properties[4]);
}

/// [SearchedAlmirah] entity fields to define ObjectBox queries.
class SearchedAlmirah_ {
  /// see [SearchedAlmirah.id]
  static final id =
      QueryIntegerProperty<SearchedAlmirah>(_entities[15].properties[0]);

  /// see [SearchedAlmirah.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedAlmirah>(_entities[15].properties[1]);

  /// see [SearchedAlmirah.searchedAlmirah]
  static final searchedAlmirah =
      QueryRelationToOne<SearchedAlmirah, Almirah>(_entities[15].properties[2]);
}

/// [SearchedCompany] entity fields to define ObjectBox queries.
class SearchedCompany_ {
  /// see [SearchedCompany.id]
  static final id =
      QueryIntegerProperty<SearchedCompany>(_entities[16].properties[0]);

  /// see [SearchedCompany.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedCompany>(_entities[16].properties[1]);

  /// see [SearchedCompany.searchedCompany]
  static final searchedCompany =
      QueryRelationToOne<SearchedCompany, Company>(_entities[16].properties[2]);
}

/// [SearchedCustomer] entity fields to define ObjectBox queries.
class SearchedCustomer_ {
  /// see [SearchedCustomer.id]
  static final id =
      QueryIntegerProperty<SearchedCustomer>(_entities[17].properties[0]);

  /// see [SearchedCustomer.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedCustomer>(_entities[17].properties[1]);

  /// see [SearchedCustomer.searchedCustomer]
  static final searchedCustomer =
      QueryRelationToOne<SearchedCustomer, Customer>(
          _entities[17].properties[2]);
}

/// [SearchedCustomerCategory] entity fields to define ObjectBox queries.
class SearchedCustomerCategory_ {
  /// see [SearchedCustomerCategory.id]
  static final id = QueryIntegerProperty<SearchedCustomerCategory>(
      _entities[18].properties[0]);

  /// see [SearchedCustomerCategory.datetime]
  static final datetime = QueryIntegerProperty<SearchedCustomerCategory>(
      _entities[18].properties[1]);

  /// see [SearchedCustomerCategory.searchedCategory]
  static final searchedCategory =
      QueryRelationToOne<SearchedCustomerCategory, CustomerCategory>(
          _entities[18].properties[2]);
}

/// [SearchedDiary] entity fields to define ObjectBox queries.
class SearchedDiary_ {
  /// see [SearchedDiary.id]
  static final id =
      QueryIntegerProperty<SearchedDiary>(_entities[19].properties[0]);

  /// see [SearchedDiary.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedDiary>(_entities[19].properties[1]);

  /// see [SearchedDiary.searchedDiary]
  static final searchedDiary =
      QueryRelationToOne<SearchedDiary, Diary>(_entities[19].properties[2]);
}

/// [SearchedGodown] entity fields to define ObjectBox queries.
class SearchedGodown_ {
  /// see [SearchedGodown.id]
  static final id =
      QueryIntegerProperty<SearchedGodown>(_entities[20].properties[0]);

  /// see [SearchedGodown.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedGodown>(_entities[20].properties[1]);

  /// see [SearchedGodown.searchedGodown]
  static final searchedGodown =
      QueryRelationToOne<SearchedGodown, Godown>(_entities[20].properties[2]);
}

/// [SearchedItem] entity fields to define ObjectBox queries.
class SearchedItem_ {
  /// see [SearchedItem.id]
  static final id =
      QueryIntegerProperty<SearchedItem>(_entities[21].properties[0]);

  /// see [SearchedItem.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedItem>(_entities[21].properties[1]);

  /// see [SearchedItem.searchedItem]
  static final searchedItem =
      QueryRelationToOne<SearchedItem, Item>(_entities[21].properties[2]);
}

/// [SearchedItemCategory] entity fields to define ObjectBox queries.
class SearchedItemCategory_ {
  /// see [SearchedItemCategory.id]
  static final id =
      QueryIntegerProperty<SearchedItemCategory>(_entities[22].properties[0]);

  /// see [SearchedItemCategory.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedItemCategory>(_entities[22].properties[1]);

  /// see [SearchedItemCategory.searchedCategory]
  static final searchedCategory =
      QueryRelationToOne<SearchedItemCategory, ItemCategory>(
          _entities[22].properties[2]);
}

/// [SearchedItemVariant] entity fields to define ObjectBox queries.
class SearchedItemVariant_ {
  /// see [SearchedItemVariant.id]
  static final id =
      QueryIntegerProperty<SearchedItemVariant>(_entities[23].properties[0]);

  /// see [SearchedItemVariant.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedItemVariant>(_entities[23].properties[1]);

  /// see [SearchedItemVariant.searchedItemVariant]
  static final searchedItemVariant =
      QueryRelationToOne<SearchedItemVariant, ItemVariant>(
          _entities[23].properties[2]);
}

/// [SearchedPurchasedItem] entity fields to define ObjectBox queries.
class SearchedPurchasedItem_ {
  /// see [SearchedPurchasedItem.id]
  static final id =
      QueryIntegerProperty<SearchedPurchasedItem>(_entities[24].properties[0]);

  /// see [SearchedPurchasedItem.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedPurchasedItem>(_entities[24].properties[1]);

  /// see [SearchedPurchasedItem.searchedPurchasedItem]
  static final searchedPurchasedItem =
      QueryRelationToOne<SearchedPurchasedItem, PurchasedItem>(
          _entities[24].properties[2]);
}

/// [SearchedReceipt] entity fields to define ObjectBox queries.
class SearchedReceipt_ {
  /// see [SearchedReceipt.id]
  static final id =
      QueryIntegerProperty<SearchedReceipt>(_entities[25].properties[0]);

  /// see [SearchedReceipt.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedReceipt>(_entities[25].properties[1]);

  /// see [SearchedReceipt.searchedReceipt]
  static final searchedReceipt =
      QueryRelationToOne<SearchedReceipt, Receipt>(_entities[25].properties[2]);
}

/// [SearchedStoreRoom] entity fields to define ObjectBox queries.
class SearchedStoreRoom_ {
  /// see [SearchedStoreRoom.id]
  static final id =
      QueryIntegerProperty<SearchedStoreRoom>(_entities[26].properties[0]);

  /// see [SearchedStoreRoom.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedStoreRoom>(_entities[26].properties[1]);

  /// see [SearchedStoreRoom.searchedStoreRoom]
  static final searchedStoreRoom =
      QueryRelationToOne<SearchedStoreRoom, StoreRoom>(
          _entities[26].properties[2]);
}

/// [SearchedSupplier] entity fields to define ObjectBox queries.
class SearchedSupplier_ {
  /// see [SearchedSupplier.id]
  static final id =
      QueryIntegerProperty<SearchedSupplier>(_entities[27].properties[0]);

  /// see [SearchedSupplier.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedSupplier>(_entities[27].properties[1]);

  /// see [SearchedSupplier.searchedSupplier]
  static final searchedSupplier =
      QueryRelationToOne<SearchedSupplier, Supplier>(
          _entities[27].properties[2]);
}

/// [SearchedUnit] entity fields to define ObjectBox queries.
class SearchedUnit_ {
  /// see [SearchedUnit.id]
  static final id =
      QueryIntegerProperty<SearchedUnit>(_entities[28].properties[0]);

  /// see [SearchedUnit.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedUnit>(_entities[28].properties[1]);

  /// see [SearchedUnit.searchedUnit]
  static final searchedUnit =
      QueryRelationToOne<SearchedUnit, Unit>(_entities[28].properties[2]);
}

/// [StoreRoom] entity fields to define ObjectBox queries.
class StoreRoom_ {
  /// see [StoreRoom.id]
  static final id =
      QueryIntegerProperty<StoreRoom>(_entities[29].properties[0]);

  /// see [StoreRoom.name]
  static final name =
      QueryStringProperty<StoreRoom>(_entities[29].properties[1]);

  /// see [StoreRoom.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<StoreRoom>(_entities[29].properties[2]);

  /// see [StoreRoom.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<StoreRoom>(_entities[29].properties[3]);

  /// see [StoreRoom.godown]
  static final godown =
      QueryRelationToOne<StoreRoom, Godown>(_entities[29].properties[4]);
}

/// [Supplier] entity fields to define ObjectBox queries.
class Supplier_ {
  /// see [Supplier.id]
  static final id = QueryIntegerProperty<Supplier>(_entities[30].properties[0]);

  /// see [Supplier.phone]
  static final phone =
      QueryStringProperty<Supplier>(_entities[30].properties[1]);

  /// see [Supplier.otherPhone]
  static final otherPhone =
      QueryStringVectorProperty<Supplier>(_entities[30].properties[2]);

  /// see [Supplier.contactListId]
  static final contactListId =
      QueryStringProperty<Supplier>(_entities[30].properties[3]);

  /// see [Supplier.nickName]
  static final nickName =
      QueryStringProperty<Supplier>(_entities[30].properties[4]);

  /// see [Supplier.name]
  static final name =
      QueryStringProperty<Supplier>(_entities[30].properties[5]);

  /// see [Supplier.address]
  static final address =
      QueryStringProperty<Supplier>(_entities[30].properties[6]);

  /// see [Supplier.account]
  static final account =
      QueryStringVectorProperty<Supplier>(_entities[30].properties[7]);

  /// see [Supplier.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Supplier>(_entities[30].properties[8]);

  /// see [Supplier.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Supplier>(_entities[30].properties[9]);

  /// see [Supplier.location]
  static final location =
      QueryRelationToOne<Supplier, Location>(_entities[30].properties[10]);

  /// see [Supplier.shopOrBusinessName]
  static final shopOrBusinessName =
      QueryStringProperty<Supplier>(_entities[30].properties[11]);
}

/// [Unit] entity fields to define ObjectBox queries.
class Unit_ {
  /// see [Unit.id]
  static final id = QueryIntegerProperty<Unit>(_entities[31].properties[0]);

  /// see [Unit.fullName]
  static final fullName =
      QueryStringProperty<Unit>(_entities[31].properties[1]);

  /// see [Unit.shortName]
  static final shortName =
      QueryStringProperty<Unit>(_entities[31].properties[2]);

  /// see [Unit.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<Unit>(_entities[31].properties[3]);

  /// see [Unit.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<Unit>(_entities[31].properties[4]);
}

/// [UnitRelation] entity fields to define ObjectBox queries.
class UnitRelation_ {
  /// see [UnitRelation.id]
  static final id =
      QueryIntegerProperty<UnitRelation>(_entities[32].properties[0]);

  /// see [UnitRelation.value]
  static final value =
      QueryDoubleProperty<UnitRelation>(_entities[32].properties[1]);

  /// see [UnitRelation.unitFrom]
  static final unitFrom =
      QueryRelationToOne<UnitRelation, Unit>(_entities[32].properties[2]);

  /// see [UnitRelation.unitTo]
  static final unitTo =
      QueryRelationToOne<UnitRelation, Unit>(_entities[32].properties[3]);
}

/// [PurchaseOrder] entity fields to define ObjectBox queries.
class PurchaseOrder_ {
  /// see [PurchaseOrder.id]
  static final id =
      QueryIntegerProperty<PurchaseOrder>(_entities[33].properties[0]);

  /// see [PurchaseOrder.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<PurchaseOrder>(_entities[33].properties[1]);

  /// see [PurchaseOrder.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<PurchaseOrder>(_entities[33].properties[2]);

  /// see [PurchaseOrder.supplier]
  static final supplier =
      QueryRelationToOne<PurchaseOrder, Supplier>(_entities[33].properties[3]);

  /// see [PurchaseOrder.orderedItems]
  static final orderedItems =
      QueryRelationToMany<PurchaseOrder, PurchaseOrderItem>(
          _entities[33].relations[0]);
}

/// [PurchaseOrderItem] entity fields to define ObjectBox queries.
class PurchaseOrderItem_ {
  /// see [PurchaseOrderItem.id]
  static final id =
      QueryIntegerProperty<PurchaseOrderItem>(_entities[34].properties[0]);

  /// see [PurchaseOrderItem.quantity]
  static final quantity =
      QueryDoubleProperty<PurchaseOrderItem>(_entities[34].properties[1]);

  /// see [PurchaseOrderItem.dateOfCreation]
  static final dateOfCreation =
      QueryIntegerProperty<PurchaseOrderItem>(_entities[34].properties[2]);

  /// see [PurchaseOrderItem.dateOfUpdation]
  static final dateOfUpdation =
      QueryIntegerProperty<PurchaseOrderItem>(_entities[34].properties[3]);

  /// see [PurchaseOrderItem.unit]
  static final unit =
      QueryRelationToOne<PurchaseOrderItem, Unit>(_entities[34].properties[4]);

  /// see [PurchaseOrderItem.item]
  static final item = QueryRelationToOne<PurchaseOrderItem, ItemVariant>(
      _entities[34].properties[5]);

  /// see [PurchaseOrderItem.orderedIn]
  static final orderedIn = QueryRelationToOne<PurchaseOrderItem, PurchaseOrder>(
      _entities[34].properties[6]);
}

/// [SearchedPurchaseOrder] entity fields to define ObjectBox queries.
class SearchedPurchaseOrder_ {
  /// see [SearchedPurchaseOrder.id]
  static final id =
      QueryIntegerProperty<SearchedPurchaseOrder>(_entities[35].properties[0]);

  /// see [SearchedPurchaseOrder.datetime]
  static final datetime =
      QueryIntegerProperty<SearchedPurchaseOrder>(_entities[35].properties[1]);

  /// see [SearchedPurchaseOrder.searchedOrder]
  static final searchedOrder =
      QueryRelationToOne<SearchedPurchaseOrder, PurchaseOrder>(
          _entities[35].properties[2]);
}
